# This is a .gdx file, gdx supports
# custom markdown language made for this addon

# To the first reactive element, extend from ReactUI,
# then for the nested component extend from ReactComponent
extends ReactUI

# Path to a jetbrains mono font
const font_path := "res://Fonts/JetBrains/fonts/ttf/JetBrainsMono-Regular.ttf"

# Reference of the rendered button
var click_button: Button

# Use this function to initialize component's state
func construct() -> void:
	self.state = {
		"click_count": 0,
		"color": Color.from_hsv(randf(), 1.0, 1.0),
	}

# Function is called when the button is clicked
func on_button_click() -> void:
	print(click_button.name)
	# Update the state and render the component
	self.set_state({
		"click_count": self.state.click_count + 1,
		"color": Color.from_hsv(randf(), 1.0, 1.0),
	})

func on_button_resized() -> void:
	click_button.rect_pivot_offset = click_button.rect_size * .5

# Here you will be rendering the component
func render():
	# Get the current state to use to render the nodes
	var click_count :int = self.state.click_count
	var color :Color = self.state.color

	# A quick and easy way to find a color perceived luminance 
	var color_lum := color.r * .2126 + color.g * .7152 + color.b * .0722
	var font_color := Color.white if color_lum < .5 else Color.black

	# Temporary variable of all the returned node's themes
	var theme := {
		# You can insert multiple themes one for each node, remember to
		# reference by name latter
		"click_button": {
			# The theme is separated into categories like Godot:
			# - Color
			# - Constant
			# - Font
			# - Icon
			# - Stylebox
			"styles": {
				# For now, you must provide the name and the stylebox type
				["normal", StyleBoxFlat]: {
					"bg_color": do_transition(color, .1),
					# ReactGD provides some shorthands that can be usefull,
					# simillar to css
					"corner_radius": 8.0,
					"content_margin_horizontal": 16.0,
					"content_margin_vertical": 8.0
				},
				["hover", StyleBoxFlat]: {
					"bg_color": do_transition(color, .1),
					# ReactGD provides some shorthands that can be usefull,
					# simillar to css
					"corner_radius": 8.0,
					"content_margin_horizontal": 16.0,
					"content_margin_vertical": 8.0
				},
				["pressed", StyleBoxFlat]: {
					"bg_color": do_transition(color, .1),
					# ReactGD provides some shorthands that can be usefull,
					# simillar to css
					"corner_radius": 8.0,
					"content_margin_horizontal": 16.0,
					"content_margin_vertical": 8.0
				}
			},
			"fonts": {
				"font": {
					# You can dynamically provide a font size, that is
					# updated automatically
					"size": 48.0,
					"use_filter": true,
					# You can just provide the font path, that is loaded
					# only once when the path changes
					"src": font_path
				}
			},
			"colors": {
				# You can also assign transitions to font colors
				"font_color": do_transition(font_color, .2),
				"font_color_hover": do_transition(font_color, .2),
				"font_color_pressed": do_transition(font_color, .2)
			}
		},
		"click_count_label": {
			"colors": {
				"font_color": Color.black
			},
			"fonts": {
				"font": {
					"size": 38.0,
					"use_filter": true,
					"src": font_path
				}
			},
		}
	}

	# You can pass a transition to a prop, ReactGD automatically
	# handle this property with the Tween node, allowing to create
	# reactive animations

	# In this case, we will pass a shake transition when the button was pressed,
	# which makes a simple squish animation
	# You can set transitions for each axis of a Vector2
	var pressed_shake_scale_x = do_shake(
		1.2, 1.0, .2, Tween.TRANS_QUAD, Tween.EASE_OUT
	)
	var pressed_shake_scale_y = do_shake(
		1.2, 1.0, .2, Tween.TRANS_QUAD, Tween.EASE_OUT, .1
	)
	var pressed_shake_rotation = do_shake(
		rand_range(-15.0, 15.0), 0.0, .2,
		Tween.TRANS_QUAD, Tween.EASE_IN_OUT
	)

	# Here you are returning the rendering,
	# if you are using .gdx extension, you can use the markdown
	# language like on ReactJS, remember to wrap around parentheses
	# This extension import .gdx files like a regular gdscript file,
	# the difference is that it enables this custom language in the script
	# that will be parsed to a more ugly, verbose dictionary variant
	# (open the script on editor to see the parsed version)

	# Don't worry, all the comments are completely ignored by the parser
	return (
		# Like on HTML, you use tags with Godot's classes or
		# custom classes
		<VBoxContainer
			anchor_top = 0.0
			anchor_left = 0.0
			anchor_right = 1.0
			anchor_bottom = 1.0
			alignment = VBoxContainer.ALIGN_CENTER
		>
			<Button
				# Use props to set the variables of the node

				# Size flags
				size_flags_horizontal = Control.SIZE_SHRINK_CENTER
				size_flags_vertical = Control.SIZE_SHRINK_CENTER

				# Here we are passing the shake transition as rect scale only when
				# click_count is higher than zero, else it pass 0.0,
				# each axis is a different transition
				rect_scale:x = (pressed_shake_scale_x if click_count > 0 else 0.0)
				rect_scale:y = (pressed_shake_scale_y if click_count > 0 else 0.0)

				# Here is another transition, this time applied to rotation
				rect_rotation = (pressed_shake_rotation if click_count > 0 else 0.0)

				# Sets the node name
				name = "ClickButton"

				# Assign a static text
				text = "Click me!"

				# When you want to connect to a signal,
				# preffix the name of the signal with 'on_',
				# this tells the ReactTree
				on_pressed = "on_button_click"

				# (Really beta state) you can pass lambda functions to be executed
				# on signal call, use `node` variable to reference to this node itself,
				# in this case, the button
				on_resized = func () => {node.set_pivot_offset(node.rect_size * 0.5)}

				# Define the theme of the button
				theme = theme.click_button

				# Pass a variable name to 'ref' when you want to keep track
				# the reference of the rendered node
				ref = "click_button"
			/>
			<Control rect_min_size = (Vector2(0.0, 16.0))/>
			<Label
				size_flags_horizontal = Control.SIZE_SHRINK_CENTER
				size_flags_vertical = Control.SIZE_SHRINK_CENTER
			
				# Dynamically assign the text, wrapping with parentheses
				text = ("You clicked " + str(click_count) + " times!")

				theme = theme.click_count_label
			/>
		</VBoxContainer>
	)