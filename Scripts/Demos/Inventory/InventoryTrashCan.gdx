extends ReactComponent

class DropableContainer:
	extends TextureRect

	signal drop_data(data)
	signal can_drop_data(data)
	
	func can_drop_data(pos: Vector2, data):
		if data is Dictionary && data.has("item_move_data"):
			emit_signal("can_drop_data", data)
			return true
		return false
	
	func drop_data(pos: Vector2, data):
		emit_signal("drop_data", data)

signal item_remove(id)

func construct():
	self.state = {
		"can_drop": false,
		"anim": {}
	}

func on_mouse_exited():
	if self.state.can_drop:
		set_state({
			"can_drop": false,
			"anim": {
				"scale_x": do_shake(
					1.2, 1.0, .2, Tween.TRANS_CUBIC, Tween.EASE_OUT
				),
				"scale_y": do_shake(
					1.2, 1.0, .2, Tween.TRANS_CUBIC, Tween.EASE_OUT, .1
				)
			}
		})

func on_can_drop_data(data):
	if !self.state.can_drop:
		set_state({
			"can_drop": true,
			"anim": {
				"scale_x": do_shake(
					1.2, 1.1, .2, Tween.TRANS_CUBIC, Tween.EASE_OUT
				),
				"scale_y": do_shake(
					1.2, 1.1, .2, Tween.TRANS_CUBIC, Tween.EASE_OUT, .1
				)
			}
		})

func on_drop_data(data):
	emit_signal("item_remove", data.item_move_data.from_slot)
	set_state({
		"can_drop": false,
		"anim": {
			"scale_x": do_shake(
				1.5, 1.0, .2, Tween.TRANS_CUBIC, Tween.EASE_OUT
			),
			"scale_y": do_shake(
				1.5, 1.0, .2, Tween.TRANS_CUBIC, Tween.EASE_OUT, .1
			),
			"rot": do_shake(
				rand_range(-45.0, 45.0), 0.0, .2,
				Tween.TRANS_CUBIC, Tween.EASE_IN_OUT
			)
		}
	})

func render():
	var anim = self.state.anim

	return (
		<DropableContainer
			size_flags_horizontal=Control.SIZE_SHRINK_CENTER
			size_flags_vertical=Control.SIZE_SHRINK_CENTER

			on_drop_data="on_drop_data"
			on_can_drop_data="on_can_drop_data"
			on_mouse_exited="on_mouse_exited"
			on_resized = func () => {node.set_pivot_offset(node.rect_size * .5)}

			texture="res://Demo Textures/TrashCan.png"

			rect_scale:x=(anim.get("scale_x", 1.0))
			rect_scale:y=(anim.get("scale_y", 1.0))
			rect_rotation=(anim.get("rot", 0.0))

			modulate = (Color("c92a42"))
		/>
	)