extends ReactComponent

const font_path := "res://Fonts/JetBrains/fonts/ttf/JetBrainsMono-Regular.ttf"

signal pressed
var btn: Button

func construct() -> void:
	self.state = {
		"anim": {}
	}

func on_mouse_entered() -> void:
	self.set_state({
		"anim": {
			"scale_x": do_shake(
				1.2, 1.1, .2, Tween.TRANS_QUAD, Tween.EASE_OUT
			),
			"scale_y": do_shake(
				1.2, 1.1, .2, Tween.TRANS_QUAD, Tween.EASE_OUT, .1
			)
		}
	})

func on_mouse_exited() -> void:
	self.set_state({
		"anim": {
			"scale_x": do_shake(
				1.2, 1.0, .2, Tween.TRANS_QUAD, Tween.EASE_OUT
			),
			"scale_y": do_shake(
				1.2, 1.0, .2, Tween.TRANS_QUAD, Tween.EASE_OUT, .1
			)
		}
	})

func on_button_pressed() -> void:
	self.set_state({
		"anim": {
			"scale_x": do_shake(
				1.4, 1.1, .2, Tween.TRANS_QUAD, Tween.EASE_OUT
			),
			"scale_y": do_shake(
				1.4, 1.1, .2, Tween.TRANS_QUAD, Tween.EASE_OUT, .1
			),
			"rot": do_shake(
				rand_range(-15.0, 15.0), 0.0, .2,
				Tween.TRANS_QUAD, Tween.EASE_IN_OUT
			)
		}
	})
	emit_signal("pressed")

func on_button_resized() -> void:
	btn.rect_pivot_offset = btn.rect_size * .5

func render():
	var theme = self.props.get("theme", {})
	var anim = self.state.anim

	return (
		<Button
			rect_scale:x = (anim.get("scale_x", 1.0))
			rect_scale:y = (anim.get("scale_y", 1.0))
			rect_rotation = (anim.get("rot", 0.0))

			size_flags_horizontal = (self.props.get("size_flags_horizontal", 1))
			size_flags_vertical = (self.props.get("size_flags_vertical", 1))

			text = (self.props.get("text", ""))

			on_pressed = "on_button_pressed"
			on_resized = "on_button_resized"

			on_mouse_entered = "on_mouse_entered"
			on_mouse_exited = "on_mouse_exited"

			theme=theme

			ref = "btn"
		/>
	)