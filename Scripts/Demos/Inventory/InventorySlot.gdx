extends ReactComponent

class DragPreview:
	extends TextureRect

	var prev_pos: Vector2
	var rot_vel: float

	func _enter_tree() -> void:
		prev_pos = rect_position

	func _process(delta: float) -> void:
		var velocity := (rect_position - prev_pos) / delta

		var from := Vector2(rect_size.x, rect_size.y)
		var to := from - velocity

		rot_vel += rad2deg(from.angle_to(to)) * 20.0 * delta

		rot_vel -= rect_rotation * 80.0 * delta
		rot_vel -= rot_vel * 5.0 * delta
		rot_vel = clamp(rot_vel, -180.0, 180.0)

		rect_rotation += rot_vel * delta

		prev_pos = rect_position

class SlotContainer:
	extends Panel

	signal drop_data(data)
	signal get_drag_data(data)
	signal get_drag_preview(data, control)

	func get_drag_data(pos: Vector2):
		var data := {
			"can_drag": false,
			"payload": {}
		}
		emit_signal("get_drag_data", data)
		if data.can_drag:
			var preview := DragPreview.new()
			emit_signal("get_drag_preview", data, preview)
			set_drag_preview(preview)
			return data.payload
		else:
			return null
	
	func can_drop_data(pos: Vector2, data):
		return data is Dictionary && data.has("item_move_data")
	
	func drop_data(pos: Vector2, data):
		emit_signal("drop_data", data)

const font_jetbrains_regular := "res://Fonts/JetBrains/fonts/ttf/JetBrainsMono-Regular.ttf"
const font_jetbrains_bold := "res://Fonts/JetBrains/fonts/ttf/JetBrainsMono-Bold.ttf"
const font_jetbrains_light := "res://Fonts/JetBrains/fonts/ttf/JetBrainsMono-Light.ttf"
const font_jetbrains_extrabold := "res://Fonts/JetBrains/fonts/ttf/JetBrainsMono-ExtraBold.ttf"

const style := {
	"container": {
		"styles": {
			["panel", StyleBoxFlat]: {
				"bg_color": Color("#00ee4540"),
				"border_width": 2.0,
				"border_color": Color("#7dee4540"),
				"corner_radius": 4.0
			}
		}
	},
	"count": {
		"fonts": {
			"font": {
				"size": 16.0,
				"use_filter": true,
				"outline_size": 1,
				"outline_color": Color.black,
				"src": font_jetbrains_bold
			}
		}
	}
}

signal item_move(from, to)
signal mouse_entered(id)
signal mouse_exited(id)

func construct():
	self.props.inventory.connect("item_count_changed", self, "on_item_count_changed")
	self.props.inventory.connect("item_added", self, "on_item_added")
	self.props.inventory.connect("item_removed", self, "on_item_removed")
	self.props.inventory.connect("item_moved", self, "on_item_moved")

	self.state = {
		"item": self.props.inventory.get_item(self.props.item_id),
		"view_item": self.props.inventory.get_item(self.props.item_id),
		"icon_animation": {},
		"slot_animation": {
			"scale_x": do_shake(
				1.2, 1.0, .2, Tween.TRANS_CUBIC, Tween.EASE_OUT
			),
			"scale_y": do_shake(
				1.2, 1.0, .2, Tween.TRANS_CUBIC, Tween.EASE_OUT, .1
			),
			"rot": do_shake(
				rand_range(-30.0, 30.0), 0.0, .2,
				Tween.TRANS_CUBIC, Tween.EASE_IN_OUT
			)
		}
	}

func on_item_count_changed(id: int, item: Dictionary):
	if id == self.props.item_id:
		set_state({
			"item": item,
			"view_item": item,
			"icon_animation": {
				"scale_x": do_shake(
					1.2, 1.0, .2, Tween.TRANS_CUBIC, Tween.EASE_OUT
				),
				"scale_y": do_shake(
					1.2, 1.0, .2, Tween.TRANS_CUBIC, Tween.EASE_OUT, .1
				),
				"rot": do_shake(
					rand_range(-30.0, 30.0), 0.0, .2,
					Tween.TRANS_CUBIC, Tween.EASE_IN_OUT
				)
			},
			"slot_animation": {}
		})

func on_item_added(id: int, item: Dictionary):
	if id == self.props.item_id:
		set_state({
			"item": item,
			"view_item": item,
			"icon_animation": {
				"scale_x": do_shake(
					1.2, 1.0, .2, Tween.TRANS_CUBIC, Tween.EASE_OUT
				),
				"scale_y": do_shake(
					1.2, 1.0, .2, Tween.TRANS_CUBIC, Tween.EASE_OUT, .1
				),
				"rot": do_shake(
					rand_range(-30.0, 30.0), 0.0, .2,
					Tween.TRANS_CUBIC, Tween.EASE_IN_OUT
				)
			},
			"slot_animation": {}
		})

func on_item_removed(id: int, item: Dictionary):
	if id == self.props.item_id:
		set_state({
			"item": {},
			"view_item": item,
			"icon_animation": {
				"scale_x": do_shake(
					1.2, 0.0, .2, Tween.TRANS_CUBIC, Tween.EASE_OUT
				),
				"scale_y": do_shake(
					1.2, 0.0, .2, Tween.TRANS_CUBIC, Tween.EASE_OUT, .1
				),
				"rot": do_shake(
					rand_range(-30.0, 30.0), 0.0, .2,
					Tween.TRANS_CUBIC, Tween.EASE_IN_OUT
				)
			},
			"slot_animation": {}
		})

func on_item_moved(from: int, to: int, from_item: Dictionary, to_item: Dictionary):
	if from == self.props.item_id:
		if to_item.empty():
			set_state({
				"item": to_item,
				"view_item": from_item,
				"icon_animation": {
					"scale_x": do_shake(
						1.2, 0.0, .2, Tween.TRANS_CUBIC, Tween.EASE_OUT
					),
					"scale_y": do_shake(
						1.2, 0.0, .2, Tween.TRANS_CUBIC, Tween.EASE_OUT, .05
					),
					"rot": do_shake(
						rand_range(-30.0, 30.0), 0.0, .2,
						Tween.TRANS_CUBIC, Tween.EASE_IN_OUT
					)
				},
				"slot_animation": {}
			})
		else:
			set_state({
				"item": to_item,
				"view_item": to_item,
				"icon_animation": {
					"scale_x": do_shake(
						1.2, 1.0, .2, Tween.TRANS_CUBIC, Tween.EASE_OUT
					),
					"scale_y": do_shake(
						1.2, 1.0, .2, Tween.TRANS_CUBIC, Tween.EASE_OUT, .1
					),
					"rot": do_shake(
						rand_range(-30.0, 30.0), 0.0, .2,
						Tween.TRANS_CUBIC, Tween.EASE_IN_OUT
					)
				},
				"slot_animation": {}
			})

func on_get_drag_data(data: Dictionary):
	var item: Dictionary = self.state.item
	if item.empty(): return
	
	data.can_drag = true
	data.payload = {
		"item_move_data": {
			"from_slot": self.props.item_id,
			"item": item
		}
	}

	set_state({
		"dragging": true
	})

func on_drop_data(data: Dictionary):
	emit_signal("item_move", data.item_move_data.from_slot, self.props.item_id)

func on_mouse_entered():
	if !self.state.item.empty():
		set_state({
			"icon_animation": {
				"scale_x": do_shake(
					1.2, 1.1, .2, Tween.TRANS_CUBIC, Tween.EASE_OUT
				),
				"scale_y": do_shake(
					1.2, 1.1, .2, Tween.TRANS_CUBIC, Tween.EASE_OUT, .05
				)
			}
		})
	
	emit_signal("mouse_entered", self.props.item_id)

func on_mouse_exited():
	if !self.state.item.empty():
		set_state({
			"icon_animation": {
				"scale_x": do_shake(
					1.2, 1.0, .2, Tween.TRANS_CUBIC, Tween.EASE_OUT
				),
				"scale_y": do_shake(
					1.2, 1.0, .2, Tween.TRANS_CUBIC, Tween.EASE_OUT, .05
				)
			}
		})
	
	emit_signal("mouse_exited", self.props.item_id)

func on_get_drag_preview(data: Dictionary, control: DragPreview) -> void:
	control.rect_size = Vector2(32.0, 32.0)
	control.expand = true
	control.texture = ResourceLoader.load(data.payload.item_move_data.item.icon)

func render():
	var view_item :Dictionary = self.state.view_item
	var item :Dictionary = self.state.item

	var slot_scale_x = self.state.slot_animation.get("scale_x", 1.0)
	var slot_scale_y = self.state.slot_animation.get("scale_y", 1.0)
	var slot_rot = self.state.slot_animation.get("rot", 0.0)

	var icon_scale_x = self.state.icon_animation.get("scale_x", 1.0)
	var icon_scale_y = self.state.icon_animation.get("scale_y", 1.0)
	var icon_rot = self.state.icon_animation.get("rot", 0.0)

	if !view_item.empty():
		return (
			<SlotContainer
				theme = style.container

				on_get_drag_data = "on_get_drag_data"
				on_drop_data = "on_drop_data"
				on_get_drag_preview = "on_get_drag_preview"
				on_mouse_entered = "on_mouse_entered"
				on_mouse_exited = "on_mouse_exited"

				on_resized = func () => {node.set_pivot_offset(node.rect_size * .5)}
			>
				<TextureRect
					texture = view_item.icon
					anchor_left = 0.0
					anchor_top = 0.0
					anchor_right = 1.0
					anchor_bottom = 1.0

					margin_left = 8.0
					margin_top = 8.0
					margin_right = -8.0
					margin_bottom = -8.0

					expand = true

					rect_scale:x = icon_scale_x
					rect_scale:y = icon_scale_y
					rect_rotation = icon_rot

					on_resized = func () => {node.set_pivot_offset(node.rect_size * .5)}

					#modulate = (Color(1.0, 1.0, 1.0, .5) if dragging else Color.white)
				/>
				<Label
					align = Label.ALIGN_RIGHT

					anchor_left = 0.0
					anchor_top = 1.0
					anchor_right = 1.0
					anchor_bottom = 1.0

					margin_left = 4
					margin_right = -4
					margin_top = -22
					margin_bottom = 0

					text = (str(view_item.get("count", "")))
					visible = (not item.empty())

					theme=style.count
				/>
			</SlotContainer>
		)
	else:
		return (
			<SlotContainer
				theme=style.container

				rect_scale:x = slot_scale_x
				rect_scale:y = slot_scale_y
				rect_rotation = slot_rot

				on_get_drag_data = "on_get_drag_data"
				on_drop_data = "on_drop_data"
				on_get_drag_preview = "on_get_drag_preview"
				on_data_dropped = "on_data_dropped"

				on_resized = func () => {node.set_pivot_offset(node.rect_size * .5)}
			/>
		)








