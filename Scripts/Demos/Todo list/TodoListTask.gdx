# This is the task component used by the todo list example,
# extends from ReactComponent instead of ReactUI
extends ReactComponent

# Constant font paths by style
const font_jetbrains_regular := "res://Fonts/JetBrains/fonts/ttf/JetBrainsMono-Regular.ttf"
const font_jetbrains_bold := "res://Fonts/JetBrains/fonts/ttf/JetBrainsMono-Bold.ttf"
const font_jetbrains_light := "res://Fonts/JetBrains/fonts/ttf/JetBrainsMono-Light.ttf"
const font_jetbrains_extrabold := "res://Fonts/JetBrains/fonts/ttf/JetBrainsMono-ExtraBold.ttf"

# InputField styling, I won't comment much here because
# the syntax will be changed
var style := {
	"task_frame": {
		"styles": {
			["panel", StyleBoxFlat]: {
				"bg_color": Color(0.141176, 0.121569, 0.2),
				"corner_radius": 8.0,
				"content_margin": 8.0
			}
		},
	},
	"task_number": {
		"fonts": {
			"font": {
				"size": 16.0,
				"use_filter": true,
				"src": font_jetbrains_light
			}
		}
	},
	"checkbox": {
		"styles": {
			["normal", StyleBoxFlat]: {
				"bg_color": Color(0.439216, 0.337255, 0.556863, 0),
				"border_width": 2.0,
				"border_color": Color(0.439216, 0.337255, 0.556863),
				"corner_radius": 4.0
			},
			["pressed", StyleBoxFlat]: {
				"bg_color": Color(0.439216, 0.337255, 0.556863, 1.0),
				"border_width": 2.0,
				"border_color": Color(0.439216, 0.337255, 0.556863),
				"corner_radius": 4.0
			},
			["hover", StyleBoxFlat]: {
				"bg_color": Color(0.439216, 0.337255, 0.556863, 0.5),
				"border_width": 2.0,
				"border_color": Color(0.439216, 0.337255, 0.556863),
				"corner_radius": 4.0
			},
		}
	},
	"task_name": {
		"fonts": {
			"font": {
				"size": 16.0,
				"use_filter": true,
				"src": font_jetbrains_light
			}
		}
	},
	"remove_button": {
		"styles": {
			["normal", StyleBoxFlat]: {
				"bg_color": Color(0.631373, 0.168627, 0.309804),
				"corner_radius": 4.0
			},
			["pressed", StyleBoxFlat]: {
				"bg_color": Color(0.466667, 0.117647, 0.356863),
				"corner_radius": 4.0
			},
			["hover", StyleBoxFlat]: {
				"bg_color": Color(0.929412, 0.160784, 0.396078),
				"corner_radius": 4.0
			}
		}
	}
}

# Custom signals
signal task_done_toggle(id, val)
signal task_remove(id)

# Function called when CheckMark is toggled, emitting
# the task_done_toggle signal followed by id and value
func on_task_done_toggle(val: bool) -> void:
	var task_id: int = self.props.get("task_id", 0)
	emit_signal("task_done_toggle", task_id, val)

# Function called when remove button is pressed, emitting
# the task_remove signal followed by id
func on_task_remove() -> void:
	var task_id: int = self.props.get("task_id", 0)
	emit_signal("task_remove", task_id)

# Main render function
func render():
	# Grab id, name and done properties passed or defaults
	var task_id: int = self.props.get("task_id", 0)
	var task_name: String = self.props.get("task_name", "")
	var task_done: bool = self.props.get("task_done", false)
	
	return (
		<PanelContainer
			size_flags_horizontal = Control.SIZE_EXPAND_FILL
			theme = style.task_frame
		>
			<HBoxContainer>
				<Label
					# Remember to wrap with parentheses if you want to add a gdscript
					# language code block to be executed on runtime
					text = (str(task_id + 1))
				/>
				<Control
					name = "separator1"
					rect_min_size = (Vector2(8.0, 0.0))
				/>
				<Button
					toggle_mode = true,
					pressed = task_done
					rect_min_size = (Vector2(22, 22))
					on_toggled = "on_task_done_toggle"
					theme = style.checkbox
				/>
				<Control
					rect_min_size = (Vector2(8.0, 0.0))
				/>
				<Label
					size_flags_horizontal = Control.SIZE_EXPAND_FILL
					text = task_name
				/>
				<Button
					text = "X"
					rect_min_size = (Vector2(22, 22))
					visible = task_done
					on_pressed = "on_task_remove"
					theme = style.remove_button
				/>
			</HBoxContainer>
		</PanelContainer>
	)


