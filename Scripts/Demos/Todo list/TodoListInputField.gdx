# This is the input field component used by the todo list example,
# extends from ReactComponent instead of ReactUI
extends ReactComponent

# Constant font paths by style
const font_jetbrains_regular := "res://Fonts/JetBrains/fonts/ttf/JetBrainsMono-Regular.ttf"
const font_jetbrains_bold := "res://Fonts/JetBrains/fonts/ttf/JetBrainsMono-Bold.ttf"
const font_jetbrains_light := "res://Fonts/JetBrains/fonts/ttf/JetBrainsMono-Light.ttf"
const font_jetbrains_extrabold := "res://Fonts/JetBrains/fonts/ttf/JetBrainsMono-ExtraBold.ttf"

# InputField styling, I won't comment much here because
# the syntax will be changed
var style := {
	"input_field": {
		"styles": {
			["normal", StyleBoxFlat]: {
				"bg_color": Color(0.439216, 0.337255, 0.556863, 0),
				"border_width": 2.0,
				"border_color": Color(0.439216, 0.337255, 0.556863),
				"corner_radius": 4.0,
				"content_margin_horizontal": 16.0,
				"content_margin_vertical": 8.0
			},
		},
		"fonts": {
			"font": {
				"size": 16.0,
				"use_filter": true,
				"src": font_jetbrains_regular
			}
		}
	},
	"add_button": {
		"colors": {
			"font_color": Color.black,
			"font_color_hover": Color.black,
			"font_color_pressed": Color.black
		},
		"styles": {
			["normal", StyleBoxFlat]: {
				"bg_color": Color(0.439216, 0.337255, 0.556863),
				"corner_radius": 8.0
			},
			["hover", StyleBoxFlat]: {
				"bg_color": Color(0.439216, 0.337255, 0.556863),
				"corner_radius": 8.0
			},
			["pressed", StyleBoxFlat]: {
				"bg_color": Color(0.439216, 0.337255, 0.556863),
				"corner_radius": 8.0
			}
		},
		"fonts": {
			"font": {
				"size": 24.0,
				"use_filter": true,
				"src": font_jetbrains_bold
			}
		}
	}
}

# Custom signals
signal task_add(task_name)

# Simple component constructor
func construct() -> void:
	self.state = {
		"task_name": ""
	}

# Signal called when the LineEdit's text changes,
# setting the current inserted task name
func on_task_name_changed(new_name: String) -> void:
	set_state({
		"task_name": new_name
	})

# Signal called when the add button is pressed,
# emitting the custom signal and clears the current
# inserted task name, ignore when current task name is
# empty
func on_add_button_pressed() -> void:
	var task_name :String = self.state.task_name
	if task_name == "": return
	emit_signal("task_add", task_name)
	self.set_state({
		"task_name": ""
	})

# Main render function
func render():
	# Grab the current task name state
	var task_name: String = self.state.task_name

	return (
		<HBoxContainer
			size_flags_horizontal = Control.SIZE_EXPAND_FILL
		>
			<LineEdit
				name = "NewTaskNameInputField"
				placeholder_text = "Insert new task name here"
				size_flags_horizontal = Control.SIZE_EXPAND_FILL
				# Set the current text, cursor is not resetted to
				# start because ReactGD handles that
				text = task_name
				theme = style.input_field
				on_text_changed = "on_task_name_changed"
			/>
			<Control
				name = "separator"
				rect_min_size = (Vector2(16.0, 0.0))
			/>
			<Button
				name = "add_button"
				text = "+"
				rect_min_size = (Vector2(40.0, 40.0))
				size_flags_vertical = Control.SIZE_SHRINK_CENTER
				on_pressed = "on_add_button_pressed"
				theme = style.add_button
			/>
		</HBoxContainer>
	)















