# This is a more complex todo list example,
# with more styling and other properties explanation
# extends from ReactUI because is the first component
# of the interface, is the same as the ReactComponent,
# the difference is that the children tree is handled
# from this node only
extends ReactUI

# Constant font paths by style
const font_jetbrains_regular := "res://Fonts/JetBrains/fonts/ttf/JetBrainsMono-Regular.ttf"
const font_jetbrains_bold := "res://Fonts/JetBrains/fonts/ttf/JetBrainsMono-Bold.ttf"
const font_jetbrains_light := "res://Fonts/JetBrains/fonts/ttf/JetBrainsMono-Light.ttf"
const font_jetbrains_extrabold := "res://Fonts/JetBrains/fonts/ttf/JetBrainsMono-ExtraBold.ttf"

# UI styling, I won't comment much here because
# the syntax is gonna change too
const style := {
	"container": {
		"styles": {
			["panel", StyleBoxFlat]: {
				"bg_color": Color(0.101961, 0.086275, 0.141176),
				"corner_radius": 8.0,
				"content_margin": 32.0
			}
		}
	},
	"title1": {
		"fonts": {
			"font": {
				"size": 24.0,
				"use_filter": true,
				"src": font_jetbrains_extrabold
			}
		}
	},
	"title2": {
		"fonts": {
			"font": {
				"size": 20.0,
				"use_filter": true,
				"src": font_jetbrains_bold
			}
		}
	},
	"empty_list": {
		"fonts": {
			"font": {
				"size": 32.0,
				"use_filter": true,
				"src": font_jetbrains_extrabold
			}
		}
	}
}

# Imports the necessary components on ready only
# (due to how gdscript works, cyclic dependency issue is very common,
# so use `load` on onready vars to properly import classes)
onready var InputField = load("res://Scripts/Demos/Todo list/TodoListInputField.gdx")
onready var Task = load("res://Scripts/Demos/Todo list/TodoListTask.gdx")

# A simple tree constructor, sets the tasks array state to a
# empty array
func construct() -> void:
	self.state = {
		"tasks": []
	}

# Function called when a task is added, followed by the name
func on_task_add(task_name: String) -> void:
	self.set_state({
		"tasks": self.state.tasks + [{
			"name": task_name,
			"done": false
		}]
	})

# Function called when a task done property is toggled,
# followed by id
func on_task_done_toggle(task_id: int, val: bool) -> void:
	var tasks: Array = self.state.tasks

	tasks[task_id].done = val

	self.set_state({"tasks": tasks})

# Function called when a done task is removed,
# followed by id
func on_task_remove(task_id: int) -> void:
	var tasks :Array = self.state.tasks
	
	tasks.remove(task_id)
	
	self.set_state({
		"tasks": tasks
	})

# Main render function
func render():
	# Retrieve added tasks
	var tasks: Array = self.state.tasks
	# Array containing children of the tasks
	# or a label when there is no task
	var children := []

	# Display a message when there is no task
	if tasks.empty():
		children = [(
			<Label
				name: "nothing_to_render"
				text: "Nothing to do right now..."
				size_flags_vertical: Control.SIZE_EXPAND_FILL
				align: Label.ALIGN_CENTER
				valign: Label.VALIGN_CENTER
				theme: style.empty_list
			/>
		)]
	else:
		# Iterate the added tasks and assign a Task child with
		# the properties of the task
		for i in range(tasks.size()):
			var task = tasks[i]
			children.append((
				<Task
					# When iterating and adding child components,
					# don't forget to set the key property, to properly
					# add the nodes in tree, else it will only show the last added
					key: i
					name: ("task_" + str(i))
					task_id: i,
					task_name: task.name
					task_done: task.done
					# Assign the custom signals,
					# usign the preffix `on_` to tell
					# that this property is a signal
					on_task_done_toggle: "on_task_done_toggle"
					on_task_remove: "on_task_remove"
				/>
			))
	
	return (
		<PanelContainer
			anchor_left: 0
			anchor_top: 0
			anchor_right: 1
			anchor_bottom: 1

			margin_left: 16.0
			margin_top: 16.0
			margin_bottom: -16.0
			margin_right: -16.0

			theme: style.container
		>
			<VBoxContainer
				size_flags_horizontal: Control.SIZE_EXPAND_FILL
				size_flags_vertical: Control.SIZE_EXPAND_FILL
			>
				<Label
					name: "Title1"
					text: "Todo list"
					theme: style.title1
				/>
				<Control rect_min_size: (Vector2(0, 16))/>
				<Label
					name: "Title2"
					text: "New task"
					theme: style.title2
				/>
				<InputField
					name: "InputField"
					on_task_add: "on_task_add"
				/>
				<Control rect_min_size: (Vector2(0, 16))/>
				<ScrollContainer
					name: "Scroll"
					horizontal_enabled: false,
					size_flags_vertical: Control.SIZE_EXPAND_FILL
				>
					<VBoxContainer
						name: "ScrollVBox"
						size_flags_horizontal: Control.SIZE_EXPAND_FILL
						size_flags_vertical: Control.SIZE_EXPAND_FILL
						# Assign the children to a node directly,
						# use this for single tags (eg. tags that
						# opens and close in the same tag)
						children: children
					/>
				</ScrollContainer>
			</VBoxContainer>
		</PanelContainer>
	)














