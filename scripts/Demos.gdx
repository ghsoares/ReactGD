"""
This is the main demo script, it import all the other demo components and
renders then in a TabContainer, so you can easily switch between the demos.
"""

"""
Components can be executed inside editor as tool scripts, this
makes easier to change something inside code and
instantly see on the editor
"""
tool
extends ReactGDComponent

class Tab:
	tool
	extends ReactGDComponent

	signal select(id)

	var tab_id: int
	var text: String
	var current: bool

	func on_pressed():
		if not current:
			emit_signal("select", tab_id)

	func render():
		var style := create_style({
			"type": StyleBoxFlat,

			"corner_radius": 4.0,
			"content_margin_horizontal": 16.0,
			"anti_aliasing": false,

			# You can put transitions as style prop,
			# so it reacts on render
			"bg_color": do_transition().go_to({
				"target": Color("#ff4659") if current else Color("#d33375"),
				"duration": .1,
				"trans_type": Tween.TRANS_CUBIC,
				"ease_type": Tween.EASE_OUT
			}),
			"border_color": do_transition().go_to({
				"target": Color("#b92370") if current else Color("#951773"),
				"duration": .1,
				"trans_type": Tween.TRANS_CUBIC,
				"ease_type": Tween.EASE_OUT
			}),
			"content_margin_bottom": do_transition().go_to({
				"target": 10.0 if current else 8.0,
				"duration": .1,
				"trans_type": Tween.TRANS_CUBIC,
				"ease_type": Tween.EASE_OUT
			}),
			"content_margin_top": do_transition().go_to({
				"target": 6.0 if current else 8.0,
				"duration": .1,
				"trans_type": Tween.TRANS_CUBIC,
				"ease_type": Tween.EASE_OUT
			}),
			"border_width_bottom": do_transition().go_to({
				"target": 6.0 if current else 4.0,
				"duration": .1,
				"trans_type": Tween.TRANS_CUBIC,
				"ease_type": Tween.EASE_OUT
			}),
			"expand_margin_top": do_transition().go_to({
				"target": 2.0 if current else 0.0,
				"duration": .1,
				"trans_type": Tween.TRANS_CUBIC,
				"ease_type": Tween.EASE_OUT
			})
		})
		return (
			<Button
				text = "Todo list"
				style_normal = style
				style_pressed = style
				style_hover = style
				style_focus = {}
				on_pressed = "on_pressed"
			/>
		)

# Custom import preprocessor, it imports this component
# with a provided name when script is instantiated
import "./Demos/Todo List/TodoList.gdx" as TodoList

func construct():
	self.state = {
		"selected_demo": 0
	}

func on_select_tab(id: int) -> void:
	set_state({"selected_demo": id})

# Main render function
func render():
	var style_main_panel := create_style({
		"type": StyleBoxFlat,
		"bg_color": Color("#4679ff"),
		"border_color": Color("#3934ca"),
		"border_width_bottom": 8.0,
		"corner_radius": 8.0,
		"content_margin": 16.0,
		"content_margin_bottom": 24.0,
		"anti_aliasing": false
	})

	return (
		<PanelContainer
			tab_align = TabContainer.ALIGN_LEFT
			anchor_left = 0.0
			anchor_top = 0.0
			anchor_right = 1.0
			anchor_bottom = 1.0
			margin_left = 16.0
			margin_top = 16.0
			margin_right = -16.0
			margin_bottom = -16.0

			const_side_margin = 0.0
			const_hseparation = 16.0

			style_panel = style_main_panel
		>
			<VBoxContainer>
				<PanelContainer
					style_panel = {}
				>
					<HBoxContainer>
						<Tab
							text = "Todo list"
							tab_id = 0
							current = (self.state.selected_demo == 0)
							on_select = "on_select_tab"
						/>
						<Tab
							text = "Todo list"
							tab_id = 1
							current = (self.state.selected_demo == 1)
							on_select = "on_select_tab"
						/>
					</HBoxContainer>
				</PanelContainer>
				<PanelContainer
					size_flags_vertical = Control.SIZE_EXPAND_FILL
					style_panel = null
				>
					# Todo list demo
					<TodoList
						visible = (self.state.selected_demo == 0)
					/>
				</PanelContainer>
			</VBoxContainer>
		</PanelContainer>
	)


