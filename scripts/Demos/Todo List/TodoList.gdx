tool
extends ReactGDComponent

import "./InputField.gdx" as InputField
import "./TaskList.gdx" as TaskList

var visible: bool

"""
Store feature for state management, you can provide
a reducer function, where you describe the state
update behaviour when it receives a dispatched action.

These functions are called 'reducers' because it reduces
all incoming actions into a single state.

Provide the initial state as optional second argument of the
reducer function, when the store are initialized, this function
are called with a empty action and no previous state, so
use the second argument to determine the state type and initial
value.
"""
func tasks_reducer(action: Dictionary, prev_state: Array = []):
	# Here the reducer is updating the state
	# differently according to the action type
	match action.type:
		"add":
			prev_state.push_front({
				"name": action.payload,
				"done": false
			})
			return prev_state
		"remove":
			prev_state.remove(action.payload)
			return prev_state
		"done_toggle":
			prev_state[action.payload.id].done = action.payload.val
			return prev_state
		_:
			return prev_state

func construct():
	# To create a store, call `create_store` with the name
	# of the reducer function
	var tasks_store = create_store("tasks_reducer")
	# Then register this store with a name, so all the nested
	# components can reference directly to this store,
	# without the need to pass it as prop
	register_store("tasks", tasks_store)

func render():
	return (
		<PanelContainer
			name="Todo list"
			visible=visible
		>
			<VBoxContainer>
				<Label text="Todo list"/>
				<InputField />
				<HSeparator
					rect_min_size:y = 16
					size_flags_horizontal=Control.SIZE_EXPAND_FILL
				/>
				<TaskList/>
			</VBoxContainer>
		</PanelContainer>
	)
